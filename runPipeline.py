#Don't need to import all of the same things which are imported in the class. Done already.

#import the relevant modules
import os, sys

#add the class file to the PYTHONPATH
sys.path.append('/Users/owenturner/Documents/PhD/KMOS/Analysis_Pipeline/Python_code/Class')

#import the class 
from pipelineClass import pipelineOps

############################################################################################
#THIS IS A SCRIPTED SERIES OF COMMANDS. THE HARD WORK IS DONE IN THE CLASS AND THE RECIPES
#This file will contain the series of steps required to go between the raw data frames and 
#the reduced science data cubes using the kmos analysis pipeline and my manual additions. 
#Will try to make it as clear as possible what is happening at each stage 
#
#It is necessary to have pre-written the .sof files and the program will check for these 
#before starting any of the pipeline steps. They can be generated by the recipes, but typically 
#These do not put the correct files in them. 
#
#User much also make sure they are in the Calibration directory when this is executed 
#
#Also must pass as an argument to the runtime the science directory to deposit the reduced 
#files into. Can either do this with a raw_input() or by doing some kind of argparse. Look 
#At Claude's cosmology code again. 
#############################################################################################

#Create an instance of the class 
pipe_methods = pipelineOps()


#NAMES OF THE SOF FILES 
dark_sof = 'dark_frames.sof'
flatfield_sof = 'flatfield.sof'

#Make initial check to see if the files exist 
if ((not (os.path.isfile(dark_sof))) or (not (os.path.isfile(flatfield_sof)))):
	raise ValueError('One or more .sof files could not be found')


##########################################
#STEP 1: DARK FRAMES AND BAD PIXEL MAP
#
#Required .sof filename: dark_frames.sof
#In the sof, require at least 5 dark frames of the same exp time.
##########################################

os.system('esorex kmos_dark %s' % dark_sof)

#Generats the two files master_dark.fits and badpixe_dark.fits that are used 
#By the flatfield recipe

#We want to grow the badpixel mask, to account for the 
#pixels surrounding the bad ones which are also saturated 

pipe_methods.badPixelextend(badpmap='badpixel_dark.fits')



###################################################
#STEP 2: FLATFIELDING
#
#Required .sof filename: flatfield.sof
#in the sof require 3 flat,off dpr.type file s
#and 18 flat,lamp files which correspond to 
#3 files for each of the 6 different rotator angles
###################################################

os.system('esorex kmos_flat %s' % flatfield_sof)

####################################################
#STEP 3: ARCS
#
#Required .sof filename: arc.sof
#
